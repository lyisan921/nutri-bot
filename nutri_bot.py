from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

GENDER, AGE, WEIGHT, HEIGHT, ACTIVITY, GOAL = range(6)
TEST_START, TEST_Q1, TEST_Q2, TEST_Q3, TEST_Q4, TEST_Q5, TEST_Q6, TEST_Q7, TEST_Q8, TEST_Q9, TEST_Q10 = range(6, 17)

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏")],
        [KeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ –ø–æ–Ω—è—Ç—å, –ø–æ–¥–æ–π–¥—ë—Ç –ª–∏ —Ç–µ–±–µ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ —Å –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–æ–º üòä\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é —Å–Ω–∏–∑—É.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return GENDER

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–∫–∞–ª–æ—Ä–∏–∏" in text:
        keyboard = [["–º", "–∂"]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –ø–æ–ª:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return GENDER
    elif "—Ç–µ—Å—Ç" in text:
        keyboard = [["–î–∞", "–ù–µ—Ç"]]
        await update.message.reply_text(
            "–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ?",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return TEST_START
    else:
        keyboard = [
            [KeyboardButton("üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏")],
            [KeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ")]
        ]
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text not in ("–º", "–∂"):
        keyboard = [["–º", "–∂"]]
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return GENDER
    user_data['gender'] = text
    await update.message.reply_text("–£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True))
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 10 or age > 120:
            raise ValueError
        user_data['age'] = age
    except:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):")
        return AGE

    await update.message.reply_text("–í–µ—Å (–∫–≥):")
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text.replace(',', '.'))
        if weight <= 0 or weight > 500:
            raise ValueError
        user_data['weight'] = weight
    except:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 65):")
        return WEIGHT

    await update.message.reply_text("–†–æ—Å—Ç (—Å–º):")
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = float(update.message.text.replace(',', '.'))
        if height <= 50 or height > 300:
            raise ValueError
        user_data['height'] = height
    except:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 170):")
        return HEIGHT

    keyboard = [["–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π"]]
    await update.message.reply_text(
        "–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ACTIVITY

async def activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    level = update.message.text.lower()
    factor = {"–Ω–∏–∑–∫–∏–π": 1.2, "—Å—Ä–µ–¥–Ω–∏–π": 1.55, "–≤—ã—Å–æ–∫–∏–π": 1.9}.get(level)
    if not factor:
        keyboard = [["–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π"]]
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ACTIVITY
    user_data['activity_factor'] = factor
    keyboard = [["–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ", "–Ω–∞–±–æ—Ä"]]
    await update.message.reply_text(
        "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.lower()
    if goal not in ("–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ", "–Ω–∞–±–æ—Ä"):
        keyboard = [["–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ", "–Ω–∞–±–æ—Ä"]]
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return GOAL
    user_data['goal'] = goal

    g = user_data
    gender = g['gender']
    weight = g['weight']
    height = g['height']
    age = g['age']
    activity = g['activity_factor']
    goal = g['goal']

    if gender == '–º':
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    tdee = bmr * activity

    if goal == '–ø–æ—Ö—É–¥–µ–Ω–∏–µ':
        target = tdee - 300
    elif goal == '–Ω–∞–±–æ—Ä':
        target = tdee + 300
    else:
        target = tdee

    protein_g = round(weight * 1.8)
    fat_g = round(weight * 1)
    protein_kcal = protein_g * 4
    fat_kcal = fat_g * 9
    carbs_kcal = target - (protein_kcal + fat_kcal)
    carbs_g = max(0, round(carbs_kcal / 4))

    await update.message.reply_text(
        f"üîç –¢–≤–æ—è –±–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞ (BMR): {int(bmr)} –∫–∫–∞–ª\n"
        f"üî• –° —É—á—ë—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (TDEE): {int(tdee)} –∫–∫–∞–ª\n"
        f"üåü –î–ª—è —Ü–µ–ª–∏ ¬´{goal}¬ª: {int(target)} –∫–∫–∞–ª/–¥–µ–Ω—å\n\n"
        f"üçó –ë–µ–ª–∫–∏: {protein_g} –≥\nü•ë –ñ–∏—Ä—ã: {fat_g} –≥\nü•î –£–≥–ª–µ–≤–æ–¥—ã: {carbs_g} –≥"
    )

    keyboard = [["–î–∞", "–ù–µ—Ç"]]
    await update.message.reply_text(
        "–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return TEST_START

async def test_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text == "–¥–∞":
        keyboard = [["1", "2", "3"]]
        await update.message.reply_text(
            "‚ùì –í–æ–ø—Ä–æ—Å 1:\n–¢—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –±—ã–ª —Ä—è–¥–æ–º –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏?\n1 ‚Äî –î–∞, 2 ‚Äî –ù–µ –∑–Ω–∞—é, 3 ‚Äî –ù–µ—Ç",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return TEST_Q1
    else:
        await update.message.reply_text(
            "–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ª–∏—á–Ω–æ –∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n"
            "@alisa_son"
        )
        return ConversationHandler.END

async def test_question(update: Update, context: ContextTypes.DEFAULT_TYPE, number: int, text: str, next_state: int):
    user_data[f'q{number}'] = update.message.text
    keyboard = [["1", "2", "3"]]
    await update.message.reply_text(
        f"‚ùì –í–æ–ø—Ä–æ—Å {number+1}:\n{text}\n1 ‚Äî –î–∞, 2 ‚Äî –ò–Ω–æ–≥–¥–∞/–Ω–µ –∑–Ω–∞—é, 3 ‚Äî –ù–µ—Ç",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return next_state

async def test_q1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await test_question(update, context, 1, "–¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å, —á—Ç–æ–±—ã –Ω–µ —Å–¥–∞—Ç—å—Å—è?", TEST_Q2)

async def test_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await test_question(update, context, 2, "–¢–µ–±–µ —Å–ª–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ?", TEST_Q3)

async def test_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await test_question(update, context, 3, "–¢—ã —á–∞—Å—Ç–æ –Ω–∞—á–∏–Ω–∞–ª(–∞) –ø–∏—Ç–∞–Ω–∏–µ, –Ω–æ –±—Ä–æ—Å–∞–ª(–∞)?", TEST_Q4)

async def test_q4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await test_question(update, context, 4, "–¢—ã —Ö–æ—á–µ—à—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é?", TEST_Q5)

async def test_q5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await test_question(update, context, 5, "–¢—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞), —á—Ç–æ —Ç–µ—Ä—è–µ—à—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏?", TEST_Q6)

async def test_q6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await test_question(update, context, 6, "–¢—ã —Ö–æ—á–µ—à—å –±—ã—Å—Ç—Ä–µ–µ –¥–æ—Å—Ç–∏—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤?", TEST_Q7)

async def test_q7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await test_question(update, context, 7, "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º—ã –≤ –ø–∏—Ç–∞–Ω–∏–∏?", TEST_Q8)

async def test_q8(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await test_question(update, context, 8, "–¢—ã —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è –Ω–∞ –±—É–¥—É—â–µ–µ?", TEST_Q9)

async def test_q9(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await test_question(update, context, 9, "–¢—ã –≥–æ—Ç–æ–≤(–∞) —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π –≤–º–µ—Å—Ç–µ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º?", TEST_Q10)

async def test_q10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data['q10'] = update.message.text
    total = 0
    for i in range(1, 11):
        ans = user_data.get(f'q{i}', '3')
        if ans == "1":
            total += 3
        elif ans == "2":
            total += 2
        else:
            total += 1

    if total >= 20:
        text = ("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ —Å –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–æ–º.\n\n"
                "–ù–∞–ø–∏—à–∏ @alisa_son, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    else:
        text = "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –¢—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞."

    await update.message.reply_text(text)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ ‚Äî /start")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("5284761727:AAG5nQPZNpWLN4Gc3fCpYGtGBT83wYLNK0U").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GENDER: [
                MessageHandler(filters.Regex("^(–º|–∂|–ú|–ñ)$"), gender),
                MessageHandler(filters.Regex("^(üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏|üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ)$"), handle_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu),
            ],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
            ACTIVITY: [MessageHandler(filters.Regex("^(–Ω–∏–∑–∫–∏–π|—Å—Ä–µ–¥–Ω–∏–π|–≤—ã—Å–æ–∫–∏–π)$"), activity)],
            GOAL: [MessageHandler(filters.Regex("^(–ø–æ—Ö—É–¥–µ–Ω–∏–µ|–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ|–Ω–∞–±–æ—Ä)$"), goal)],
            TEST_START: [MessageHandler(filters.Regex("^(–¥–∞|–Ω–µ—Ç|–î–∞|–ù–µ—Ç)$"), test_start)],
            TEST_Q1: [MessageHandler(filters.Regex("^[123]$"), test_q1)],
            TEST_Q2: [MessageHandler(filters.Regex("^[123]$"), test_q2)],
            TEST_Q3: [MessageHandler(filters.Regex("^[123]$"), test_q3)],
            TEST_Q4: [MessageHandler(filters.Regex("^[123]$"), test_q4)],
            TEST_Q5: [MessageHandler(filters.Regex("^[123]$"), test_q5)],
            TEST_Q6: [MessageHandler(filters.Regex("^[123]$"), test_q6)],
            TEST_Q7: [MessageHandler(filters.Regex("^[123]$"), test_q7)],
            TEST_Q8: [MessageHandler(filters.Regex("^[123]$"), test_q8)],
            TEST_Q9: [MessageHandler(filters.Regex("^[123]$"), test_q9)],
            TEST_Q10: [MessageHandler(filters.Regex("^[123]$"), test_q10)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
